/*
@title: Enigma
@author: Ben Gertler
@tags: ['simulation', 'sandbox']
@addedOn: 2024-07-27
*/

//tile definitions
const cursor = "C"
const reflectorTile = "R"
const button = "B"
const divider = "D"
const a = "a"
const b = "b"
const c = "c"
const d = "d"
const e = "e"
const f = "f"
const g = "g"
const h = "h"
const i = "i"
const j = "j"
const k = "k"
const l = "l"
const m = "m"
const n = "n"
const o = "o"
const p = "p"
const q = "q"
const r = "r"
const s = "s"
const t = "t"
const u = "u"
const v = "v"
const w = "w"
const x = "x"
const y = "y"
const z = "z"
const plugTile1 = ">"
const plugTile2 = "<"
const scramTop = "1"
const scramMid = "2"
const scramBot = "3"
const light = "L"

setLegend(
  [cursor, bitmap`
3333333333333333
3333333333333333
33............33
33............33
33............33
33............33
33............33
33............33
33............33
33............33
33............33
33............33
33............33
33............33
3333333333333333
3333333333333333`],
  [reflectorTile, bitmap`
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111`],
  [button, bitmap`
....00000000....
...0........0...
..0..........0..
.0............0.
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
0..............0
.0............0.
..0..........0..
...0........0...
....00000000....`],
  [divider, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],
  [a, bitmap`
................
................
................
................
................
................
................
.....00000......
.........00.....
.....000000.....
....00...00.....
.....0000.00....
................
................
................
................`],
  [b, bitmap`
................
................
................
................
................
....000.........
.....00.........
.....00000......
.....00..00.....
.....00..00.....
.....00..00.....
....00.000......
................
................
................
................`],
  [c, bitmap`
................
................
................
................
................
................
................
.....0000.......
....00..00......
....00..........
....00..00......
.....0000.......
................
................
................
................`],
  [d, bitmap`
................
................
................
................
................
.......000......
........00......
.....00000......
....00..00......
....00..00......
....00..00......
.....000.00.....
................
................
................
................`],
  [e, bitmap`
................
................
................
................
................
................
................
.....0000.......
....00..00......
....000000......
....00..........
.....0000.......
................
................
................
................`],
  [f, bitmap`
................
................
................
................
................
......000.......
.....00.00......
.....00.........
....0000........
.....00.........
.....00.........
....0000........
................
................
................
................`],
  [g, bitmap`
................
................
................
................
................
................
................
................
.....000.00.....
....00..00......
....00..00......
.....00000......
........00......
....00000.......
................
................`],
  [h, bitmap`
................
................
................
................
................
....000.........
.....00.........
.....00.00......
.....000.00.....
.....00..00.....
.....00..00.....
....000..00.....
................
................
................
................`],
  [i, bitmap`
................
................
................
................
................
......00........
................
.....000........
......00........
......00........
......00........
....000000......
................
................
................
................`],
  [j, bitmap`
................
................
................
................
................
........00......
................
.......000......
........00......
........00......
....00..00......
....00..00......
.....0000.......
................
................
................`],
  [k, bitmap`
................
................
................
................
................
....000.........
.....00.........
.....00..00.....
.....00.00......
.....0000.......
.....00.00......
....000..00.....
................
................
................
................`],
  [l, bitmap`
................
................
................
................
................
.....000........
......00........
......00........
......00........
......00........
......00........
....000000......
................
................
................
................`],
  [m, bitmap`
................
................
................
................
................
................
................
....00..00......
....0000000.....
....0000000.....
....00.0.00.....
....00...00.....
................
................
................
................`],
  [n, bitmap`
................
................
................
................
................
................
................
....00000.......
....00..00......
....00..00......
....00..00......
....00..00......
................
................
................
................`],
  [o, bitmap`
................
................
................
................
................
................
................
.....0000.......
....00..00......
....00..00......
....00..00......
.....0000.......
................
................
................
................`],
  [p, bitmap`
................
................
................
................
................
................
................
................
....00.000......
.....00..00.....
.....00..00.....
.....00000......
.....00.........
....0000........
................
................`],
  [q, bitmap`
................
................
................
................
................
................
................
................
.....000.00.....
....00..00......
....00..00......
.....00000......
........00......
.......0000.....
................
................`],
  [r, bitmap`
................
................
................
................
................
................
................
....00.000......
.....000.00.....
.....00..00.....
.....00.........
....0000........
................
................
................
................`],
  [s, bitmap`
................
................
................
................
................
................
................
.....00000......
....00..........
.....0000.......
........00......
....00000.......
................
................
................
................`],
  [t, bitmap`
................
................
................
................
................
......0.........
.....00.........
....00000.......
.....00.........
.....00.........
.....00.0.......
......00........
................
................
................
................`],
  [u, bitmap`
................
................
................
................
................
................
................
....00..00......
....00..00......
....00..00......
....00..00......
.....000.00.....
................
................
................
................`],
  [v, bitmap`
................
................
................
................
................
................
................
....00..00......
....00..00......
....00..00......
.....0000.......
......00........
................
................
................
................`],
  [w, bitmap`
................
................
................
................
................
................
................
....00...00.....
....00.0.00.....
....0000000.....
....0000000.....
.....00.00......
................
................
................
................`],
  [x, bitmap`
................
................
................
................
................
................
................
....00...00.....
.....00.00......
......000.......
.....00.00......
....00...00.....
................
................
................
................`],
  [y, bitmap`
................
................
................
................
................
................
................
................
....00..00......
....00..00......
....00..00......
.....00000......
........00......
....00000.......
................
................`],
  [z, bitmap`
................
................
................
................
................
................
................
....000000......
....0..00.......
......00........
.....00..0......
....000000......
................
................
................
................`],
  [plugTile1, bitmap`
................
....55555555....
...5555555555...
..555555555555..
.55555555555555.
.55555555555555.
.55555555555555.
.55555555555555.
.55555555555555.
.55555555555555.
.55555555555555.
.55555555555555.
..555555555555..
...5555555555...
....55555555....
................`],
  [plugTile2, bitmap`
................
....DDDDDDDD....
...DDDDDDDDDD...
..DDDDDDDDDDDD..
.DDDDDDDDDDDDDD.
.DDDDDDDDDDDDDD.
.DDDDDDDDDDDDDD.
.DDDDDDDDDDDDDD.
.DDDDDDDDDDDDDD.
.DDDDDDDDDDDDDD.
.DDDDDDDDDDDDDD.
.DDDDDDDDDDDDDD.
..DDDDDDDDDDDD..
...DDDDDDDDDD...
....DDDDDDDD....
................`],
  [scramTop, bitmap`
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..`],
  [scramMid, bitmap`
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..
..LLLLLLLLLLLL..`],
  [scramBot, bitmap`
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..
..111111111111..`],
  [light, bitmap`
....66666666....
...6666666666...
..666666666666..
.66666666666666.
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
.66666666666666.
..666666666666..
...6666666666...
....66666666....`]
)

setSolids([cursor, divider])

//map definitions
let level = 0
const levels = [
  map`
..........
..R.1.1.1.
..R.2.2.2.
..R.3.3.3.
qwertyuiop
asdfghjkl.
.zxcvbnm..
DDDDDDDDDD
qwertyuiop
asdfghjkl.
Czxcvbnm..`, //qwerty keboard
]

const alphabet = "abcdefghijklmnopqrstuvwxyz"; //it's just the alphabet.
const alphabetCapital = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //alphabet but capitalized
//number to letter
function alphabetize(inNumber) {return alphabet.charAt(inNumber - 1);}
//letter to number
function dealphabetize(inCharacter) {return (alphabet.indexOf(inCharacter) + 1);}
//makes a lowercase letter capital
function capitalize(inCharacter) {return (alphabetCapital.charAt(alphabet.indexOf(inCharacter)));}
//puts a number within alphabet if it's at most 1 alphabet away
function constrain(constrainee) {
    if (constrainee < 1) {return constrainee + 26;}
    else if (constrainee > 26) {return constrainee - 26;}
    else return constrainee;
}


var letter; //number value of inputted letter, 1-26

var rotations = [0, 0, 0]; //rotations of scramblers in wheel order, 0-25

var plugIn1; //inputted plug 1 letter, a-z
var plugIn2;
var plugIn3;
var plugIn4;
var plug1 = dealphabetize(plugIn1); //switchboard, swaps with plug2 at beginning and end, 1-26 or 0 for off
var plug2 = dealphabetize(plugIn2); //switchboard, swaps with plug1
var plug3 = dealphabetize(plugIn3); //switchboard, swaps with plug4
var plug4 = dealphabetize(plugIn4); //switchboard, swaps with plug3

var wheelOrder = [1, 2, 3]

const scramList1 = [17, 6, 4, 22, 8, 26, 7, 3, 11, 14, 20, 18, 10, 19, 9, 23, 12, 21, 16, 1, 5, 24, 2, 13, 25, 15] //sequential array of scrambler 1's 26 outputs at rotation 0. remember, arrays start at 0
const scramList2 = [3, 17, 16, 12, 14, 5, 8, 22, 9, 19, 2, 23, 10, 15, 7, 26, 24, 18, 21, 25, 6, 11, 13, 20, 4, 1]
const scramList3 = [3, 23, 14, 1, 11, 6, 9, 2, 5, 18, 10, 24, 12, 13, 16, 21, 8, 22, 25, 17, 4, 15, 20, 26, 19, 7]

const reflectList = [21, 17, 11, 10, 6, 25, 15, 26, 18, 22, 14, 3, 9, 23, 8, 24, 5, 16, 13, 20, 7, 19, 2, 4, 12, 1] //even indexes go to the next on the array, odd go back (starting at 0)

var ciphertext = ""


function scrambler1 (rot, reflected) {
    //account for scrambler's rotation
    let scramLetter = constrain(letter + rot);
    //enigmatize that thang
    if (reflected == false) {letter = scramList1[scramLetter - 1] - rot;}
    else {letter = scramList1.indexOf(scramLetter) + 1 - rot;}
    //there's only so much alphabet
    letter = constrain(letter)
}

function scrambler2 (rot, reflected) {
    let scramLetter = constrain(letter + rot);
    if (reflected == false) {letter = scramList2[scramLetter - 1] - rot;}
    else {letter = scramList2.indexOf(scramLetter) + 1 - rot;}
    letter = constrain(letter)
}

function scrambler3 (rot, reflected) {
    let scramLetter = constrain(letter + rot);
    if (reflected == false) {letter = scramList3[scramLetter - 1] - rot;}
    else {letter = scramList3.indexOf(scramLetter) + 1 - rot;}
    letter = constrain(letter)
}

function switchboard() {
    if (letter == plug1) {letter = plug2;}
    else if (letter == plug2) {letter = plug1;}
    else if (letter == plug3) {letter = plug4;}
    else if (letter == plug4) {letter = plug3;}
}

function scramble(reflected) {
    for (let letterPos = 0 + (2 * reflected); letterPos < 3 && letterPos >= reflected - 1; letterPos += 1 - (2 * reflected)) {
      //check scrambler of current position, execute, change position, repeat three times.
      //if reflected true, start at third scrambler and go backwards
        if (wheelOrder[letterPos] == 1) {scrambler1(rotations[letterPos], reflected);}
        else if (wheelOrder[letterPos] == 2) {scrambler2(rotations[letterPos], reflected);}
        else if (wheelOrder[letterPos] == 3) {scrambler3(rotations[letterPos], reflected);}
    }
}

function reflector() {
    if (reflectList.indexOf(letter) % 2 == 0) {letter = reflectList[reflectList.indexOf(letter) + 1];} //if letter's position in array is even, move to next index
    else {letter = reflectList[reflectList.indexOf(letter) - 1];} //if letter's position in array is odd, move down an index
}

function rotate(){
    if (rotations[0] != 25) {rotations[0]++;}
    else {
        rotations[0] = 0;
        if (rotations[1] != 25) {rotations[1]++;}
        else {
            rotations[1] = 0;
            if (rotations[2] != 25) {rotations[2]++;}
            else {rotations[2] = 0;}
        }
    }
}

function executeEnigma() {
    switchboard();
    scramble(false);
    reflector();
    scramble(true);
    switchboard();
    rotate();
}

setMap(levels[level]) //make it look nice
if(level == 0) { 
  addSprite(0, 8, button)
  addSprite(1, 8, button)
  addSprite(2, 8, button)
  addSprite(3, 8, button)
  addSprite(4, 8, button)
  addSprite(5, 8, button)
  addSprite(6, 8, button)
  addSprite(7, 8, button)
  addSprite(8, 8, button)
  addSprite(9, 8, button)
  addSprite(0, 9, button)
  addSprite(1, 9, button)
  addSprite(2, 9, button)
  addSprite(3, 9, button)
  addSprite(4, 9, button)
  addSprite(5, 9, button)
  addSprite(6, 9, button)
  addSprite(7, 9, button)
  addSprite(8, 9, button)
  addSprite(1, 10, button)
  addSprite(2, 10, button)
  addSprite(3, 10, button)
  addSprite(4, 10, button)
  addSprite(5, 10, button)
  addSprite(6, 10, button)
  addSprite(7, 10, button)
  updateScramblers()
}

function updateScramblers() { //change letters on scramblers to match rotations
  for (let scramblerNum = 0; scramblerNum <= 2; scramblerNum++) {
    for (let scramblerY = 1; scramblerY <= 3; scramblerY++) {
      clearTile((8-(2*scramblerNum)), scramblerY)
      if (scramblerY == 1) {
        addSprite((8-(2*scramblerNum)), 1, scramTop)
      }
      else if (scramblerY == 2) {
        addSprite((8-(2*scramblerNum)), 2, scramMid)
      }
      else {
        addSprite((8-(2*scramblerNum)), 3, scramBot)
      }
      addSprite((8-(2*scramblerNum)), scramblerY, alphabetize(constrain(rotations[scramblerNum]+3-scramblerY)))
    }
  }
}

updateScramblers()

//WASD
onInput("w", () => {
  getFirst(cursor).y -= 1
})
onInput("a", () => {
  getFirst(cursor).x -= 1
})
onInput("s", () => {
  getFirst(cursor).y += 1
})
onInput("d", () => {
  getFirst(cursor).x += 1
})

//select input letter
onInput("l", () => {
  letter = 0
  for (let letterChecked = 1; letterChecked <= 26 && letter == 0; letterChecked++){
    //check if cursor x and y are the same as letter x and y
    if (getFirst(cursor).x == getAll(alphabetize(letterChecked))[1].x && getFirst(cursor).y == getAll(alphabetize(letterChecked))[1].y) {
      letter = letterChecked;
    }
  }
  //if you aren't on blank space
  if (letter != 0) {
      executeEnigma()
    //get rid of previous light, if there is one
    if (getAll(light).length != 0) {
      getFirst(light).remove()
    }
    //add light to output letter
    addSprite((getFirst(alphabetize(letter))).x, (getFirst(alphabetize(letter))).y, light)
    //graft new output onto end of previous outputs, or start list of outputs
    if (ciphertext.length == 0) {
      ciphertext = capitalize(alphabetize(letter))
    }
    else ciphertext = ciphertext + capitalize(alphabetize(letter))
    //list outputs
    addText(ciphertext, { 
    x: 3,
    y: 0,
    color: color`3`})
  
    updateScramblers();
  }

})
